---
import type {Block} from "@wp-block-tools/styles";
import BlockRenderer from "../components/BlockRenderer.astro";
import CommonHead from "../components/CommonHead.astro";

export async function getStaticPaths() {
    const response = await fetch(`${import.meta.env.WPGRAPHQL_URL}`, {
        method: "POST",
        headers: {
            "content-type": "application/json"
        },
        body: JSON.stringify({
            query: `
            query AllPages {
              pages(first: 10000) {
                nodes {
                  uri
                  blocks(attributes:false)
                }
              }
              properties(first: 10000) {
                nodes {
                  uri
                  blocks(attributes:false)
                }
              }
            }`
        })
    });

    const {data} = await response.json();
    console.log('data', data);
    return [...data.pages.nodes, ...data.properties.nodes]
        .filter((page: any) => {
            let found = false;

            const hasPropertySearch = (blocks: Block[]) => {
                for(let block of blocks) {
                    if(block.name === 'astro-experiments/property-search') {
                        found = true;
                        break;
                    }

                    if(block.innerBlocks) {
                        hasPropertySearch(block.innerBlocks);
                    }
                }
            }

            hasPropertySearch(page.blocks);

            return !found;
        })
        .map((page) => ({
        params: {slug: page.uri === '/' ? undefined : page.uri},
    }))
}

const response = await fetch(`${import.meta.env.WPGRAPHQL_URL}`, {
    method: "POST",
    headers: {
        "content-type": "application/json"
    },
    body: JSON.stringify({
        query: `
        query PageQuery($uri: String!) {
            nodeByUri(uri: $uri) {
                ...on ContentNode {
                  databaseId
                  blocks
                   seo {
                    metaDesc
                    title
                  }
                }
            }
        }`,
        variables: {
            uri: Astro.params.slug || "/"
        }
    })
});

const {data} = await response.json();
const blocks = (data.nodeByUri?.blocks || []) as Block[];
const seo = data.nodeByUri?.seo;
---

<!doctype html>
<html lang="en">
    <CommonHead title={seo.title || ""} description={seo.metaDesc || ""} />
    <body>
        <BlockRenderer blocks={blocks} postId={data.nodeByUri?.databaseId}></BlockRenderer>
    </body>
</html>
